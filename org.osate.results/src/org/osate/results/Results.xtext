grammar org.osate.results.Results with org.osate.alisa.common.Common //org.eclipse.xtext.common.Terminals

generate results "http://www.osate.org/results/Results"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://aadl.info/AADL/2.0" as aadl2

ResultReport: ResultDataReport | ResultReportCollection | IssuesReport;

// Collection of reports for an instance model (root), e.g., for collection of end to end flows
ResultReportCollection:
	'reports' name=ID (':' title=STRING)?
	'for' target=[ecore::EObject|URIID] // system instance or other EObject
	'['
	('description' description=STRING)?
	content+=ResultReport*
	( issues+=ResultIssue*)?
	']'
;
// one report of an analysis for one item in the instance model.
// it may be a report per SOM or per end to end flow
// result represents the result data that can be queried
ResultDataReport returns ResultDataReport:
	'report' name=ID (':' title=STRING)?
	'for' target=[ecore::EObject|URIID] // system instance or other EObject
	'['
	('description' description=STRING)?
	('heading' heading=STRING
	content+=ResultContributor*)?
	('results' resultData+=ResultData+)?
	issues+=ResultIssue*
	']'
;

// one row to represent a contributor to the result calculation.
// this structure can be nested
// each contributor can have issues reported
// user may define a subclass of this to add analysis specific data representations
ResultContributor returns ResultContributor:
	'contributor' target=[ecore::EObject|URIID] // instance model element or declarative model element
		'[' ('results' resultData+=ResultData+ )?
	 	issues+=ResultIssue*
		subcontributor+=ResultContributor*
	']'
;
// default implementation of result data
// a set of name value pairs with the values expressed as strings
// user can create a subclass of this to provide a specialized representation
ResultData:
	name=ID '=' value = RLiteral
;


IssuesReport returns IssuesReport:
	'issues' name=ID 
	('for' target=[ecore::EObject|URIID])?
	('[' 
	('description' description=STRING)?
		issues+=ResultIssue*']'
	)?
;

RLiteral returns aadl2::PropertyExpression:
	RBooleanLiteral |
	RRealTerm | RIntegerTerm |
	RStringTerm 
;


RIntegerTerm returns aadl2::IntegerLiteral:
	value=RSignedInt (unit=[aadl2::UnitLiteral|ID])?
	;

RSignedInt returns aadl2::Integer:
	('+'|'-')?INT ;
	

RRealTerm returns aadl2::RealLiteral:
	value=RSignedReal (unit=[aadl2::UnitLiteral|ID])?
	;

RSignedReal returns aadl2::Real:
	('+'|'-')?REAL_LIT ;

RBooleanLiteral returns aadl2::PropertyExpression :
	{aadl2::BooleanLiteral}(value?='true'|'false')
;


RStringTerm returns aadl2::StringLiteral:
	value=NoQuoteString
;

NoQuoteString :
	// remove quotes from string in ValueConverter
	STRING
;

