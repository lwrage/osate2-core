/**
 * Copyright 2015 Carnegie Mellon University. All Rights Reserved.
 *
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE
 * MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO
 * WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON
 * UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM
 * PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 *
 * Released under the Eclipse Public License (http://www.eclipse.org/org/documents/epl-v10.php)
 *
 * See COPYRIGHT file for full details.
 */

/*
 * generated by Xtext
 */
package org.osate.assure.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.util.SimpleAttributeResolver
import org.osate.aadl2.ComponentImplementation
import org.osate.alisa.common.scoping.CommonScopeProvider
import org.osate.assure.assure.ClaimResult
import org.osate.assure.assure.ModelResult
import org.osate.assure.assure.NestedClaimReference
import org.osate.assure.assure.QualifiedVAReference
import org.osate.assure.assure.SubsystemResult

import static extension org.osate.assure.util.AssureUtilExtension.*

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class AssureScopeProvider extends CommonScopeProvider {

	def scope_NamedElement(ClaimResult context, EReference reference) {
		val targetClassifier = context.caseTargetClassifier
		if (targetClassifier !== null) {
			val thescope = new SimpleScope(IScope::NULLSCOPE,
				Scopes::scopedElementsFor(targetClassifier.getAllFeatures+targetClassifier.allModes,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), false)
			if (targetClassifier instanceof ComponentImplementation) {
				new SimpleScope(thescope,
					Scopes::scopedElementsFor(targetClassifier.allSubcomponents+targetClassifier.allEndToEndFlows+
						targetClassifier.allConnections,
						QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), false)
			} else {
				return thescope
			}
		} else {
			IScope.NULLSCOPE
		}
	}


	def scope_Subcomponent(SubsystemResult context, EReference reference) {
		val parent = context.eContainer
		val cl = switch(parent){
			SubsystemResult: parent.targetSystem.allClassifier
			ModelResult: parent.target
		}
		if (cl instanceof ComponentImplementation){
		val subs = cl.allSubcomponents
		return new SimpleScope(IScope::NULLSCOPE, Scopes::scopedElementsFor(subs,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), false)
		}
		return IScope::NULLSCOPE
	}


	def scope_NestedClaimReference_requirement(NestedClaimReference context, EReference reference) {
		var result = IScope.NULLSCOPE// delegateGetScope(context, reference)
		val forSystemRequirements = context.findVerificationPlan.getRequirementSet
		if (!forSystemRequirements.requirements.empty) {
			result = new SimpleScope(result,
				Scopes::scopedElementsFor(forSystemRequirements.requirements,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), false)
		}
		return result
	}

	def scope_QualifiedVAReference_verificationActivity(QualifiedVAReference context, EReference reference) {
		var result = IScope.NULLSCOPE//delegateGetScope(context, reference)
		val claim = context.findClaim
		val vas= claim.activities
		if (!vas.empty) {
			result = new SimpleScope(result,
				Scopes::scopedElementsFor(vas,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), false)
		}
		return result
	}

}
