/**
 * Copyright 2015 Carnegie Mellon University. All Rights Reserved.
 *
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE
 * MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO
 * WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON
 * UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM
 * PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 *
 * Released under the Eclipse Public License (http://www.eclipse.org/org/documents/epl-v10.php)
 *
 * See COPYRIGHT file for full details.
 */

/*
 * generated by Xtext
 */
package org.osate.alisa.workbench.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.util.SimpleAttributeResolver
import org.osate.alisa.common.scoping.CommonScopeProvider
import org.osate.alisa.workbench.alisa.AssurancePlan

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class AlisaScopeProvider extends CommonScopeProvider {
	def scope_Subcomponent(AssurancePlan context, EReference reference) {
		val targetClassifier = context.target
		if (targetClassifier !== null) {
//			targetClassifier.getAllFeatures.scopeFor
			return new SimpleScope(IScope::NULLSCOPE,
				Scopes::scopedElementsFor(targetClassifier.allSubcomponents,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), false)
		} else {
			IScope.NULLSCOPE
		}
	}
	
	def IScope scope_AssuranceCase_system(EObject context, EReference reference) {
		new SimpleScope(delegateGetScope(context, reference).allElements.map[EObjectDescription.create(name.toString("::"), EObjectOrProxy)], false)
	}
}