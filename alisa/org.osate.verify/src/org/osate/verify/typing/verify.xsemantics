import java.util.List
import org.eclipse.emf.common.util.EList
import org.osate.aadl2.NumberType
import org.osate.aadl2.Property
import org.osate.aadl2.PropertyExpression
import org.osate.aadl2.PropertyType
import org.osate.aadl2.UnitsType
import org.osate.alisa.common.typing.CommonTypeSystem
import org.osate.verify.verify.ComputeRef
import org.osate.verify.verify.FormalParameter
import org.osate.verify.verify.VerificationActivity
import org.osate.verify.verify.VerifyPackage

system org.osate.verify.typing.VerifyTypeSystem extends CommonTypeSystem

// can't do this!  validatorExtends AbstractVerifyValidator
// instead copied getPackages into VerifyValidator

judgments {
	assignArgument |- FormalParameter formal <- PropertyExpression actual
	assignReturn |- FormalParameter ret --> ComputeRef compute
	assignArguments |- VerificationActivity owner ~> List<FormalParameter> formals << List<PropertyExpression> actuals
	assignReturns |- VerificationActivity owner ~> List<FormalParameter> returns >> List<ComputeRef> computes
	assignProperties ||- VerificationActivity owner ~> List<Property> properties << List<PropertyExpression> values
}

rule TypeFormalParameter
	G |- FormalParameter param : PropertyType expType
from {
	val declared = param.getType
	declared !== null
	G |- declared : expType
	if (param.unit !== null) {
		val targetType = param.unit.eContainer as UnitsType
		expType instanceof NumberType
		or
			fail
				error 'typing: can only convert unit of a numeric type'
				source param
		val numType = expType as NumberType
		numType.unitsType !== null
		or
			fail
				error 'typing: parameter type has no unit'
				source param
		G |- numType.unitsType ~~ targetType
		or
			fail
				error 'typing: cannot convert ' + stringRep(numType) + ' to ' + stringRep(targetType)
				source param
	}
}

rule ArgumentSequence
  G |- VerificationActivity owner ~> List<FormalParameter> formals << EList<PropertyExpression> actuals
from {
  actuals.size == formals.size
  or
  	fail
    	error 'expected ' + formals.size + ' arguments, but got ' + actuals.size
    	source owner 
    
  val aIter = actuals.iterator
  val fIter = formals.iterator
  while (aIter.hasNext && fIter.hasNext) {
  	val actual = aIter.next
  	val formal = fIter.next
    G |- formal <- actual
  }
}

rule Argument
  G |- FormalParameter formal <- PropertyExpression actual
from {
	G |- actual : var PropertyType actualType
	var PropertyType formalType
	G |- formal : formalType
	or {/* ignore */}
	if (formalType !== null) {
		G |- formalType <: actualType
  	or
    	fail
	  		error 'typing: ' + stringRep(actualType) + 'cannot be assigned to ' + stringRep(formalType)
	  		source actual
	}
}

rule ReturnSequence
  G |- VerificationActivity owner ~> List<FormalParameter> returns >> List<ComputeRef> computeRefs
from {
  computeRefs.size == returns.size
  or
  	fail
    	error 'expected ' + returns.size + ' return values, but got ' + computeRefs.size
    	feature VerifyPackage.eINSTANCE.verificationActivity_Computes
    	source owner 
    
  val cIter = computeRefs.iterator
  val rIter = returns.iterator
  while (cIter.hasNext && rIter.hasNext) {
  	val computeRef = cIter.next
  	val ret = rIter.next
    G |- ret --> computeRef
  }
}

rule Return
  G |- FormalParameter ret --> ComputeRef computeRef
from {
	if (computeRef.compute !== null) {
	G |- computeRef.compute : var PropertyType computeType
	var PropertyType retType
	G |- ret : retType
	or {/* ignore */}
	if (retType !== null) {
		G |- computeType <: retType
  	or
    	fail
	  		error 'typing: ' + stringRep(retType) + 'cannot be assigned to ' + stringRep(computeType)
	  		source computeRef
  }
  }
}

rule PropertyValues
	G ||- VerificationActivity owner ~> List<Property> properties << List<PropertyExpression> values
from {
  properties.size == values.size
  or
  	fail
    	error 'expected ' + properties.size + ' property values, but got ' + values.size
    	feature VerifyPackage.eINSTANCE.verificationActivity_PropertyValues
    	source owner 
    
  val pIter = properties.iterator
  val vIter = values.iterator
  while (pIter.hasNext && vIter.hasNext) {
  	val property = pIter.next
  	val value = vIter.next
  	val left = property.propertyType
  	G |- value : var PropertyType right
		G |- left <: right
	 	or
  	 	fail
  			error 'typing: ' + stringRep(right) + 'cannot be assigned to ' + stringRep(left)
  			source value
  }
}

checkrule CheckVerificationMethodParams for
	FormalParameter formal
from {
	empty |-formal : var PropertyType type
}

checkrule CheckActivityArguments for 
	VerificationActivity activity 
from {
	val method = activity.method
	empty |- activity ~> method.formals << activity.actuals
}

checkrule CheckActivityReturns for 
	VerificationActivity activity 
from {
	val method = activity.method
	empty |- activity ~> method.results >> activity.computes
}

checkrule CheckPropertyTypes for
	VerificationActivity activity
from {
	val method = activity.method
	empty ||- activity ~> method.properties << activity.propertyValues
}
